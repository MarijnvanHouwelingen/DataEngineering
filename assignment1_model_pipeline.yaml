# PIPELINE DEFINITION
# Name: fraud-predictor-training-pipeline
# Inputs:
#    data_bucket: str
#    dataset_feature_name: str
#    dataset_label_name: str
#    model_repo: str
#    project_id: str
components:
  comp-clean-data:
    executorLabel: exec-clean-data
    inputDefinitions:
      artifacts:
        merged_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        cleaned_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-compare-model:
    executorLabel: exec-compare-model
    inputDefinitions:
      parameters:
        metrics_knn:
          parameterType: STRUCT
        metrics_lr:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-condition-1:
    dag:
      tasks:
        predict-knn:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-predict-knn
          inputs:
            artifacts:
              model_knn:
                componentInputArtifact: pipelinechannel--train-knn-model
              test_data:
                componentInputArtifact: pipelinechannel--train-test-split-dataset_test
          taskInfo:
            name: predict-knn
        upload-model-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs
          dependentTasks:
          - predict-knn
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-knn-model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs
    inputDefinitions:
      artifacts:
        pipelinechannel--train-knn-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        pipelinechannel--train-test-split-dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-condition-2:
    dag:
      tasks:
        predict-lr:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-predict-lr
          inputs:
            artifacts:
              model_lr:
                componentInputArtifact: pipelinechannel--train-lr-model
              test_data:
                componentInputArtifact: pipelinechannel--train-test-split-dataset_test
          taskInfo:
            name: predict-lr
        upload-model-to-gcs-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-2
          dependentTasks:
          - predict-lr
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-lr-model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        pipelinechannel--train-lr-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        pipelinechannel--train-test-split-dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-download-data:
    executorLabel: exec-download-data
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        feature_dataset_name:
          parameterType: STRING
        label_dataset_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        feature_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        label_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-merge-data:
    executorLabel: exec-merge-data
    inputDefinitions:
      artifacts:
        feature_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        label_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        merged_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-predict-knn:
    executorLabel: exec-predict-knn
    inputDefinitions:
      artifacts:
        model_knn:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        results:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-predict-lr:
    executorLabel: exec-predict-lr
    inputDefinitions:
      artifacts:
        model_lr:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        results:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-knn:
    executorLabel: exec-train-knn
    inputDefinitions:
      artifacts:
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-lr:
    executorLabel: exec-train-lr
    inputDefinitions:
      artifacts:
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-test-split:
    executorLabel: exec-train-test-split
    inputDefinitions:
      artifacts:
        cleaned_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        dataset_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-2:
    executorLabel: exec-upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-clean-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - clean_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'numpy'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef clean_data(merged_dataset: Input[Dataset], cleaned_dataset: Output[Dataset]):\n\
          \    '''Deletes irrelevant columns and removes NA's'''\n    import pandas\
          \ as pd\n    import logging\n    import sys\n    import numpy\n\n    # Sets\
          \ the logging config\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \ \n\n    #Loads the merged dataset in\n    df = pd.read_csv(merged_dataset.path\
          \ + \".csv\", index_col=None)\n\n    # Drops the columns: Birthday_count,\
          \ Employed_days, Mobile_phone, Work_Phone, Phone, EMAIL_ID, Type_Occupation\
          \ and Family_Members.\n    cleandf = df.drop(columns= [\"Ind_ID\",\"Type_Income\"\
          ,\"EDUCATION\",\"Marital_status\",\"Housing_type\", \"Birthday_count\",\
          \ \"Employed_days\", \"Mobile_phone\", \"Work_Phone\", \"Phone\", \"EMAIL_ID\"\
          , \"Type_Occupation\", \"Family_Members\"])\n    # make everything in 0\
          \ and 1\n    cleandf[\"GENDER\"].replace({\"M\":1,\"F\":0}, inplace = True)\n\
          \    cleandf[\"Car_Owner\"].replace({\"Y\":1,\"N\":0}, inplace = True)\n\
          \    cleandf[\"Propert_Owner\"].replace({\"Y\":1,\"N\":0}, inplace = True)\n\
          \    cleandf.dropna(inplace = True)\n    # Save the cleaned dataset\n  \
          \  cleandf.to_csv(cleaned_dataset.path + \".csv\", index=False, encoding='utf-8-sig')\n\
          \n"
        image: python:3.10.7-slim
    exec-compare-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compare_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compare_model(metrics_knn: dict, metrics_lr: dict) -> str:\n\
          \    import logging\n    import json\n    import sys\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n    logging.info(metrics_knn)\n    logging.info(metrics_lr)\n\
          \    if metrics_knn.get(\"f1_score\") > metrics_lr.get(\"f1_score\"):\n\
          \        return \"KNN\"\n    else :\n        return \"LR\"\n\n"
        image: python:3.10.7-slim
    exec-download-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_data(project_id: str, bucket: str, feature_dataset_name:\
          \ str, label_dataset_name: str, \n                  feature_dataset: Output[Dataset],\
          \ label_dataset: Output[Dataset]):\n    '''Download data'''\n    from google.cloud\
          \ import storage\n    import pandas as pd\n    import logging \n    import\
          \ sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\
          \n    # Get the client and bucket\n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket)\n\n     # Download the feature dataset\n\
          \    blob1 = bucket.blob(feature_dataset_name)\n    blob1.download_to_filename(feature_dataset.path\
          \ + \".csv\")\n\n    # Download the label dataset\n    blob2 = bucket.blob(label_dataset_name)\n\
          \    blob2.download_to_filename(label_dataset.path + \".csv\")\n\n    logging.info('Download\
          \ & Merge all Data complete!')\n\n"
        image: python:3.10.7-slim
    exec-merge-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - merge_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' &&\
          \ \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef merge_data(feature_dataset: Input[Dataset], label_dataset: Input[Dataset],\
          \ merged_dataset: Output[Dataset]):\n    import pandas as pd\n    import\
          \ logging \n    import sys\n    # Download the datasets\n    df_feature\
          \ = pd.read_csv(feature_dataset.path + \".csv\",index_col=None)\n    df_label\
          \ = pd.read_csv(label_dataset.path + \".csv\",index_col=None)\n    # merge\
          \ them together\n    merged_df = pd.merge(df_feature, df_label, on='Ind_ID')\n\
          \    merged_df.to_csv(merged_dataset.path + \".csv\", index=False, encoding='utf-8-sig')\n\
          \n"
        image: python:3.10.7-slim
    exec-predict-knn:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_knn
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_knn(model_knn: Input[Model],\n               test_data:\
          \ Input[Dataset],\n               results: Output[Dataset]):\n    # Load\
          \ in packages\n    import pandas as pd\n    import json\n    import logging\n\
          \    import sys\n    import os\n    import pickle\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load the test data\n    df = pd.read_csv(test_data.path+\"\
          .csv\")\n\n    # Loading the saved knn model with joblib\n    m_filename\
          \ = model_knn.path + \".pkl\"\n    knn_model = pickle.load(open(m_filename,\
          \ 'rb'))\n\n    # Split the test and train data\n    X_test = df.drop([\"\
          label\"], axis=1)\n    y_test = df['label']\n\n    # Get and log the predictions\
          \ of the knn model\n    y_pred = knn_model.predict(X_test)\n    logging.info(y_pred)\n\
          \n    # Save the predictions of the model\n    dfcp = df.copy()   \n   \
          \ dfcp['pclass'] = y_pred.tolist()     \n    dfcp.to_csv(results.path +\
          \ \".csv\" , index=False, encoding='utf-8-sig')  \n\n"
        image: python:3.10.7-slim
    exec-predict-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_lr(model_lr: Input[Model],\n               test_data:\
          \ Input[Dataset],\n               results: Output[Dataset]):\n    # Load\
          \ in packages\n    import pandas as pd\n    import json\n    import logging\n\
          \    import sys\n    import os\n    import pickle\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load the test data\n    df = pd.read_csv(test_data.path+\"\
          .csv\")\n\n    # Loading the saved logistic regression model with joblib\n\
          \    m_filename = model_lr.path + \".pkl\"\n    lr_model = pickle.load(open(m_filename,\
          \ 'rb'))\n\n    # Split the test and train data\n    X_test = df.drop([\"\
          label\"], axis=1)\n    y_test = df['label']\n\n    # Get and log the predictions\
          \ of the knn model\n    y_pred = lr_model.predict(X_test)\n    logging.info(y_pred)\n\
          \n    # save the predictions of the model on the testset\n    dfcp = df.copy()\
          \   \n    dfcp['pclass'] = y_pred.tolist()     \n    dfcp.to_csv(results.path\
          \ + \".csv\" , index=False, encoding='utf-8-sig')\n\n"
        image: python:3.10.7-slim
    exec-train-knn:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_knn
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_knn(train_dataset: Input[Dataset], test_dataset: Input[Dataset],\
          \ model: Output[Model]) -> NamedTuple('outputs', metrics=dict):\n    '''train\
          \ a LogisticRegression with default parameters'''\n    import pandas as\
          \ pd\n    from sklearn.neighbors import KNeighborsClassifier \n    from\
          \ sklearn.metrics import f1_score\n    import pickle \n    import logging\
          \ \n\n    # Read the training dataset\n    df_train = pd.read_csv(train_dataset.path\
          \ + \".csv\")\n    df_test = pd.read_csv(test_dataset.path + \".csv\")\n\
          \    # Splitting the label and feature data\n    y_train = df_train[\"label\"\
          ]\n    X_train = df_train.drop(\"label\", axis = 1)\n\n    # test dataset\n\
          \    y_test = df_test[\"label\"]\n    X_test = df_test.drop(\"label\", axis\
          \ = 1)\n\n    # Initiate a KNN with default parameters\n    model_knn =\
          \ KNeighborsClassifier()\n    model_knn.fit(X_train, y_train)\n\n    y_pred\
          \ = model_knn.predict(X_test)\n    # Get the F1 Score score of the lr model\n\
          \    metrics_dict = {\n    \"f1_score\": f1_score(y_test,y_pred, average\
          \ = \"binary\")\n    }\n    # Save metadata to the KNN model\n    model.metadata[\"\
          framework\"] = \"KNN\"\n    model.metadata[\"parameters\"] = \"Default\"\
          \n\n    logging.info(metrics_dict)\n    # Save the model as pickle file\
          \ \n    file_name = model.path + f\".pkl\"\n    with open(file_name, 'wb')\
          \ as file:  \n        pickle.dump(model_knn, file)   \n\n    outputs = NamedTuple(\"\
          outputs\", metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-train-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_lr(train_dataset: Input[Dataset], test_dataset: Input[Dataset],\
          \ model: Output[Model]) -> NamedTuple('outputs', metrics=dict):\n    '''train\
          \ a LogisticRegression with default parameters'''\n    import pandas as\
          \ pd\n    from sklearn.linear_model import LogisticRegression\n    from\
          \ sklearn.metrics import f1_score\n    import pickle \n    import logging\
          \ \n\n    # Read the training dataset\n    df_train = pd.read_csv(train_dataset.path\
          \ + \".csv\")\n    df_test = pd.read_csv(test_dataset.path + \".csv\")\n\
          \    # Splitting the label and feature data\n    y_train = df_train[\"label\"\
          ]\n    X_train = df_train.drop(\"label\", axis = 1)\n\n    # test dataset\n\
          \    y_test = df_test[\"label\"]\n    X_test = df_test.drop(\"label\", axis\
          \ = 1)\n\n    # Initiating a logistic regression model with default parameters\n\
          \    model_lr = LogisticRegression()\n    model_lr.fit(X_train, y_train)\n\
          \n    y_pred = model_lr.predict(X_test)\n    # Get the F1 Score score of\
          \ the lr model\n    metrics_dict = {\n    \"f1_score\": f1_score(y_test,y_pred,\
          \ average = \"binary\")\n    }\n\n    logging.info(metrics_dict)\n    #\
          \ Save metadata to the Logistic regression model\n    model.metadata[\"\
          framework\"] = \"LR\"\n    model.metadata[\"parameters\"] = \"Default\"\n\
          \n    # Save the model as pickle file \n    file_name = model.path + f\"\
          .pkl\"\n    with open(file_name, 'wb') as file:  \n        pickle.dump(model_lr,\
          \ file)\n\n    outputs = NamedTuple(\"outputs\", metrics=dict)\n    return\
          \ outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-train-test-split:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_test_split
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_test_split(cleaned_dataset: Input[Dataset], dataset_train:\
          \ Output[Dataset], dataset_test: Output[Dataset]):\n    '''train_test_split'''\n\
          \    import pandas as pd\n    import logging \n    import sys\n    from\
          \ sklearn.model_selection import train_test_split as tts\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO) \n\n    # get the cleaned data from previous component\n\
          \    alldata = pd.read_csv(cleaned_dataset.path + \".csv\", index_col=None)\
          \ \n\n    #create a train and test dataset\n    train, test = tts(alldata,\
          \ test_size=0.3)\n\n    #create a train.csv file and a test.csv file\n \
          \   train.to_csv(dataset_train.path + \".csv\" , index=False, encoding='utf-8-sig')\n\
          \    test.to_csv(dataset_test.path + \".csv\" , index=False, encoding='utf-8-sig')\n\
          \n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob('model_assignment1.pkl')\n    source_file_name=\
          \ model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob('model_assignment1.pkl')\n    source_file_name=\
          \ model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: fraud-predictor-training-pipeline
root:
  dag:
    tasks:
      clean-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-clean-data
        dependentTasks:
        - merge-data
        inputs:
          artifacts:
            merged_dataset:
              taskOutputArtifact:
                outputArtifactKey: merged_dataset
                producerTask: merge-data
        taskInfo:
          name: clean-data
      compare-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compare-model
        dependentTasks:
        - train-knn
        - train-lr
        inputs:
          parameters:
            metrics_knn:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-knn
            metrics_lr:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-lr
        taskInfo:
          name: compare-model
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - compare-model
        - train-knn
        - train-test-split
        inputs:
          artifacts:
            pipelinechannel--train-knn-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-knn
            pipelinechannel--train-test-split-dataset_test:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-1
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'KNN'
      condition-2:
        componentRef:
          name: comp-condition-2
        dependentTasks:
        - compare-model
        - train-lr
        - train-test-split
        inputs:
          artifacts:
            pipelinechannel--train-lr-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-lr
            pipelinechannel--train-test-split-dataset_test:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-2
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'LR'
      download-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-data
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            feature_dataset_name:
              componentInputParameter: dataset_feature_name
            label_dataset_name:
              componentInputParameter: dataset_label_name
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: download-data
      merge-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-merge-data
        dependentTasks:
        - download-data
        inputs:
          artifacts:
            feature_dataset:
              taskOutputArtifact:
                outputArtifactKey: feature_dataset
                producerTask: download-data
            label_dataset:
              taskOutputArtifact:
                outputArtifactKey: label_dataset
                producerTask: download-data
        taskInfo:
          name: merge-data
      train-knn:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-knn
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            test_dataset:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
            train_dataset:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-knn
      train-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-lr
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            test_dataset:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
            train_dataset:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-lr
      train-test-split:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-test-split
        dependentTasks:
        - clean-data
        inputs:
          artifacts:
            cleaned_dataset:
              taskOutputArtifact:
                outputArtifactKey: cleaned_dataset
                producerTask: clean-data
        taskInfo:
          name: train-test-split
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      dataset_feature_name:
        parameterType: STRING
      dataset_label_name:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      project_id:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
